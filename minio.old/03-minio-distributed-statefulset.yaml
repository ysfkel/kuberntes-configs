apiVersion: apps/v1
kind: StatefulSet
metadata:
  # This name uniquely identifies the StatefulSet
  name: minio
  namespace: minio-io
spec:
  serviceName: minio
  podManagementPolicy: Parallel
  replicas: 4
  selector:
    matchLabels:
      app: minio # has to match .spec.template.metadata.labels
  template:
    metadata:
      labels:
        app: minio # has to match .spec.selector.matchLabels
    spec:
      containers:
      - name: minio
        env:
        - name: MINIO_ACCESS_KEY
          valueFrom:
            secretKeyRef:
              name: minio-secrets
              key: minio-access-key
        - name: MINIO_SECRET_KEY
          valueFrom:
            secretKeyRef:
              name: minio-secrets
              key: minio-secret-key
        image: meylvpkshrbr01.mscloudinfra.com/consensys/minio/minio:RELEASE.2020-01-16T22-40-29Z
        args:
        - server
        - http://minio-{0...3}.minio/data
        ports:
        - containerPort: 9000
        # These volume mounts are persistent. Each pod in the PetSet
        # gets a volume mounted based on this field.
        volumeMounts:
        - name: data
          mountPath: /data
        # Liveness probe detects situations where MinIO server instance
        # is not working properly and needs restart. Kubernetes automatically
        # restarts the pods if liveness checks fail.
  #       livenessProbe:
  #         httpGet:
  #           path: /minio/health/live
  #           port: 9000
  #         initialDelaySeconds: 120
  #         periodSeconds: 20
  #       # Readiness probe detects situations where MinIO server instance
  #       # is not ready to accept connections. Kubernetes automatically
  #       # stops all the traffic to the pods if readiness checks fail.
  #       readinessProbe:
  #         httpGet:
  #           path: /minio/health/ready
  #           port: 9000
  #         initialDelaySeconds: 120
  #         periodSeconds: 20
  # # These are converted to volume claims by the controller
